#Cidade.py
class Cidade:
    def __init__(self, nome, distanciaObjetivo):
        self.nome = nome
        self.visitado = False
        self.distanciaObjetivo = distanciaObjetivo
        self.adjacentes = []
    
    def addCidadeAdjacente(self, cidade):
        self.adjacentes.append(cidade)




#Adjacente.py
class Adjacente:
    def __init__(self, cidade):
        self.cidade = cidade




#Mapa.py
from Cidade import Cidade
from Adjacente import Adjacente

class Mapa:
    fozDoIguacu = Cidade("Foz do Iguaçu", 535)
    cascavel = Cidade("Cascavel", 426)
    patoBranco = Cidade("Pato Branco", 353)
    campoMourao = Cidade("Campo Mourão", 350)
    maringa = Cidade("Maringá", 350)
    guarapuava = Cidade("Guarapuava", 221)
    londrina = Cidade("Londrina", 305)
    uniaoDaVitoria = Cidade("União da Vitória", 203)
    irati = Cidade("Irati", 139)
    pontaGrossa = Cidade("Ponta Grossa", 97)
    curitiba = Cidade("Curitiba", 0)
    
    fozDoIguacu.addCidadeAdjacente(Adjacente(cascavel))
    fozDoIguacu.addCidadeAdjacente(Adjacente(patoBranco))
    
    cascavel.addCidadeAdjacente(Adjacente(fozDoIguacu))
    cascavel.addCidadeAdjacente(Adjacente(campoMourao))
    cascavel.addCidadeAdjacente(Adjacente(guarapuava))
    cascavel.addCidadeAdjacente(Adjacente(patoBranco))
    
    patoBranco.addCidadeAdjacente(Adjacente(fozDoIguacu))
    patoBranco.addCidadeAdjacente(Adjacente(guarapuava))
    
    campoMourao.addCidadeAdjacente(Adjacente(maringa))
    campoMourao.addCidadeAdjacente(Adjacente(cascavel))
    campoMourao.addCidadeAdjacente(Adjacente(guarapuava))
    
    maringa.addCidadeAdjacente(Adjacente(campoMourao))
    maringa.addCidadeAdjacente(Adjacente(londrina))
    
    guarapuava.addCidadeAdjacente(Adjacente(patoBranco))
    guarapuava.addCidadeAdjacente(Adjacente(cascavel))
    guarapuava.addCidadeAdjacente(Adjacente(campoMourao))
    guarapuava.addCidadeAdjacente(Adjacente(londrina))
    guarapuava.addCidadeAdjacente(Adjacente(pontaGrossa))
    guarapuava.addCidadeAdjacente(Adjacente(irati))
    
    londrina.addCidadeAdjacente(Adjacente(maringa))
    londrina.addCidadeAdjacente(Adjacente(guarapuava))
    londrina.addCidadeAdjacente(Adjacente(pontaGrossa))
    
    uniaoDaVitoria.addCidadeAdjacente(Adjacente(cascavel))
    uniaoDaVitoria.addCidadeAdjacente(Adjacente(irati))
    uniaoDaVitoria.addCidadeAdjacente(Adjacente(curitiba))
    
    irati.addCidadeAdjacente(Adjacente(uniaoDaVitoria))
    irati.addCidadeAdjacente(Adjacente(guarapuava))
    irati.addCidadeAdjacente(Adjacente(curitiba))
    
    pontaGrossa.addCidadeAdjacente(Adjacente(londrina))
    pontaGrossa.addCidadeAdjacente(Adjacente(guarapuava))
    pontaGrossa.addCidadeAdjacente(Adjacente(curitiba))
    
    curitiba.addCidadeAdjacente(Adjacente(pontaGrossa))
    curitiba.addCidadeAdjacente(Adjacente(irati))
    curitiba.addCidadeAdjacente(Adjacente(uniaoDaVitoria))
    
'''mapa = Mapa()
mapa.uniaoDaVitoria.nome
mapa.uniaoDaVitoria.visitado
mapa.uniaoDaVitoria.adjacentes
mapa.uniaoDaVitoria.distanciaObjetivo
for i in range(len(mapa.uniaoDaVitoria.adjacentes)):
    print(mapa.uniaoDaVitoria.adjacentes[i].cidade.nome)'''




#VetorOrdenado.py
class VetorOrdenado:
    def __init__(self, tamanho):
        self.numeroElementos = 0
        self.cidades = [None] * tamanho
    
    def inserir(self, cidade):
        if self.numeroElementos == 0:
            self.cidades[0] = cidade
            self.numeroElementos = 1
            return
        
        posicao = 0
        i = 0
        while i < self.numeroElementos:
            if cidade.distanciaObjetivo > self.cidades[posicao].distanciaObjetivo:
                posicao += 1
            i += 1
            
        for k in range(self.numeroElementos, posicao, -1):
            self.cidades[k] = self.cidades[k - 1]
            
        self.cidades[posicao] = cidade
        self.numeroElementos += 1
        
    def getPrimeiro(self):
        return self.cidades[0]
    
    def mostrar(self):
        for i in range(0, self.numeroElementos):
            print('{} - {}'.format(self.cidades[i].nome, self.cidades[i].distanciaObjetivo))
            
'''from Mapa import Mapa
mapa = Mapa()
vetor = VetorOrdenado(5)
vetor.inserir(mapa.londrina) #305
vetor.inserir(mapa.cascavel) #426
vetor.inserir(mapa.guarapuava) #221
vetor.inserir(mapa.irati) #139
vetor.mostrar()'''




#Gulosa.py
from VetorOrdenado import VetorOrdenado

class Gulosa:
    def __init__(self, objetivo):
        self.objetivo = objetivo
        self.achou = False
        
    def buscar(self, atual):
        print('\nAtual: {}'.format(atual.nome))
        atual.visitado = True
        
        if atual == self.objetivo:
            self.achou = True
        else:
            self.fronteira = VetorOrdenado(len(atual.adjacentes))
            for a in atual.adjacentes:
                if a.cidade.visitado == False:
                    a.cidade.visitado = True
                    self.fronteira.inserir(a.cidade)
            self.fronteira.mostrar()
            if self.fronteira.getPrimeiro() != None:
                Gulosa.buscar(self, self.fronteira.getPrimeiro())
                
from Mapa import Mapa
mapa = Mapa()
gulosa = Gulosa(mapa.curitiba)
gulosa.buscar(mapa.fozDoIguacu)